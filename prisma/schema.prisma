// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  seed     = "ts-node prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FileStatus {
  UPLOADED
  PROCESSING
  PROCESSED
  FAILED
}

enum TourStatus {
  DRAFT
  ON_TOUR
  FINISHED
}

enum UserRole {
  ADMIN
  PREMIUM
  USER
}

enum TourToUserRole {
  OWNER
  EDITOR
  FELLOW
  VIEWER
}

enum Gender {
  MALE
  FEMALE
  UNKNOWN
}

enum TourVisibility {
  PUBLIC
  FOLLOWERS
  PRIVATE
}

model User {
  id            String                @id @default(cuid())
  name          String?
  username      String?               @unique
  email         String                @unique
  emailVerified DateTime?
  image         File?                 @relation(fields: [fileId], references: [id])
  role          UserRole              @default(USER)
  bio           String?
  tz            String?
  showEmail     Boolean               @default(false)
  country       Country?              @relation(fields: [countryId], references: [id])
  location      String?
  gender        Gender?               @default(UNKNOWN)
  accounts      Account[]
  sessions      Session[]
  TourToUser    TourToUser[]
  Notification  Notification[]
  Comments      Comment[]
  Social        Social[]
  fileId        String?
  countryId     String?
  likes         UserLikeTourSection[]
}

model Social {
  id     String @id @default(cuid())
  url    String
  name   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model File {
  id                 String        @id @default(cuid())
  fileName           String
  fileKey            String
  bucket             String
  contentType        String
  size               BigInt
  uploadedAt         DateTime      @default(now())
  description        String?
  status             FileStatus    @default(UPLOADED)
  processingMetadata Json?
  tourSection        TourSection[]
  tour               Tour[]
  User               User[]

  @@index([bucket, fileKey])
}

model Tour {
  id           String         @id @default(cuid())
  name         String         @unique
  displayName  String
  description  String?
  visibility   TourVisibility @default(PUBLIC)
  location     String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  sections     TourSection[]
  heroImage    File?          @relation(fields: [fileId], references: [id])
  fileId       String?
  status       TourStatus     @default(DRAFT)
  TourToUser   TourToUser[]
  Tags         Tag[]
  Notification Notification[]
}

model UserLikeTourSection {
  id            String       @id @default(cuid())
  userId        String
  tourSectionId String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id])
  TourSection   TourSection? @relation(fields: [tourSectionId], references: [id])
}

model TourSection {
  id                  String                @id @default(cuid())
  tourId              String
  name                String
  description         String
  image               File?                 @relation(fields: [fileId], references: [id])
  loaction            String?
  lat                 Float?
  lng                 Float?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  tour                Tour                  @relation(fields: [tourId], references: [id])
  fileId              String
  datetime            DateTime
  Comments            Comment[]
  UserLikeTourSection UserLikeTourSection[]
}

model TourToUser {
  id         String         @id @default(cuid())
  tourId     String
  userId     String
  role       TourToUserRole
  isFollow   Boolean        @default(false)
  isFavorite Boolean        @default(false)
  isPinned   Boolean        @default(false)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  user       User           @relation(fields: [userId], references: [id])
  tour       Tour           @relation(fields: [tourId], references: [id])

  @@unique([tourId, userId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  read      Boolean  @default(false)
  message   String
  Tour      Tour?    @relation(fields: [tourId], references: [id])
  tourId    String?
  saved     Boolean  @default(false)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Comment {
  id            String       @id @default(cuid())
  userId        String
  tourId        String
  message       String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id])
  TourSection   TourSection? @relation(fields: [tourSectionId], references: [id])
  tourSectionId String?
}

model Tag {
  tourId String @id @default(cuid())
  tour   Tour   @relation(fields: [tourId], references: [id])
  tag    String
}

model Country {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model Setting {
  id        String   @id @default(cuid())
  key       String
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
