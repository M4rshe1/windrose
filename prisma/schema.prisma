// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FileStatus {
  UPLOADED
  PROCESSING
  PROCESSED
  FAILED
}

enum TourStatus {
  DRAFT
  ON_TOUR
  FINISHED
}

enum Role {
  ADMIN
  PEMIUM
  USER
}

enum TourToUserRole {
  OWNER
  EDITOR
  VIEWER
}

model User {
  id            String       @id @default(cuid())
  name          String?
  username      String?      @unique
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
  TourToUser    TourToUser[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model File {
  id                 String        @id @default(cuid())
  userId             String
  fileName           String
  fileKey            String
  bucket             String
  contentType        String
  size               BigInt
  uploadedAt         DateTime      @default(now())
  description        String?
  status             FileStatus    @default(UPLOADED)
  processingMetadata Json?
  tourSection        TourSection[]
  tour               Tour[]

  @@index([bucket, fileKey])
}

model Tour {
  id          String        @id @default(cuid())
  name        String
  displayName String
  location    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  sections    TourSection[]
  heroImage   File          @relation(fields: [fileId], references: [id])
  fileId      String
  status      TourStatus    @default(DRAFT)
  TourToUser  TourToUser[]
}

model TourSection {
  id          String   @id @default(cuid())
  tourId      String
  name        String
  description String
  image       File?    @relation(fields: [fileId], references: [id])
  loaction    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tour        Tour     @relation(fields: [tourId], references: [id])
  fileId      String
  datetime    DateTime
}

model Tags {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TourToUser {
  id        String         @id @default(cuid())
  tourId    String
  userId    String
  role      TourToUserRole
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id])
  tour      Tour           @relation(fields: [tourId], references: [id])
}

// model Notification
// user access request, likes, comments, etc
